/* Ids Popup Component */
@use '../../themes/mixins/ids-core-mixins' as mixins;
@use '../../components/ids-module-nav/ids-module-nav-common' as moduleNav;

:host {
  display: block;
  z-index: var(--ids-z-index-60);
  text-align: unset;
}

:host([type='tooltip']) {
  z-index: var(--ids-z-index-tooltips);
}

:host([position-style='absolute']) {
  position: absolute;
}

:host([position-style='fixed']) {
  position: fixed;
}

// Viewport-centered Popup centering is changed
:host([position-style='viewport']) {
  position: static;
}

// When a popup is not visible, `aria-hidden="true"` is applied to the host element.
// The element is still in document flow in this case, so we need to prevent clicks
// from occuring inside the "invisible" Popup
:host(:not([visible])) {
  pointer-events: none;
}

// Visible, animated host elements receive left/top animations
:host([visible][animated]) {
  transition:
    left var(--ids-motion-duration) var(--ids-motion-linear),
    top var(--ids-motion-duration) var(--ids-motion-linear);
}

.ids-popup {
  @include mixins.antialiased();

  // Positions the arrow correctly
  position: relative;

  // This style is always applied when IdsPopup is not visible
  // (goes hand-in-hand with `aria-hidden="true"` on the host element
  &:not(.open) {
    pointer-events: none;
  }

  // Arrow definition
  .arrow {
    border-width: var(--ids-popup-arrow-size);
    display: none;
    position: absolute;

    &.bottom,
    &.left,
    &.right,
    &.top {
      border-style: solid;
      border-color: transparent;
      display: block;
      height: 0;
      width: 0;
    }

    &::after {
      border-style: solid;
      border-color: transparent;
      border-width: var(--ids-popup-arrow-size);
      content: '';
      display: block;
      position: relative;
    }

    // Bottom Alignment
    &.bottom {
      border-top-width: 0;
      left: calc(50% - var(--ids-popup-arrow-size));
      top: calc(var(--ids-popup-arrow-size) * -1);

      &::after {
        border-top-width: 0;
        left: calc(var(--ids-popup-arrow-size) * -1);
        top: 1px;
      }
    }

    // Left Alignment
    &.left {
      border-right-width: 0;
      right: calc(var(--ids-popup-arrow-size) * -1);
      top: calc(50% - var(--ids-popup-arrow-size));

      &::after {
        border-right-width: 0;
        left: calc(var(--ids-popup-arrow-size) * -1);
        top: calc(var(--ids-popup-arrow-size) * -1);
      }
    }

    // Right Alignment
    &.right {
      border-left-width: 0;
      left: calc(var(--ids-popup-arrow-size) * -1);
      top: calc(50% - var(--ids-popup-arrow-size));

      &::after {
        border-left-width: 0;
        left: 1px;
        top: calc(var(--ids-popup-arrow-size) * -1);
      }
    }

    // Top Alignment
    &.top {
      border-bottom-width: 0;
      bottom: calc(var(--ids-popup-arrow-size) * -1);
      left: calc(50% - var(--ids-popup-arrow-size));

      &::after {
        border-bottom-width: 0;
        left: calc(var(--ids-popup-arrow-size) * -1);
        top: calc((var(--ids-popup-arrow-size) * -1) - 1px);
      }
    }
  }

  // Animates X/Y movement, fade in/out of the popup.
  &.animated {
    transition:
      border-color var(--ids-motion-duration) var(--ids-motion-linear),
      opacity var(--ids-motion-duration) var(--ids-motion-linear),
      transform var(--ids-motion-duration) var(--ids-motion-linear);

    ::slotted(*) {
      transition: opacity var(--ids-motion-duration) var(--ids-motion-linear);
    }

    &.open {
      transition:
        border-color var(--ids-motion-duration) var(--ids-motion-linear),
        opacity var(--ids-motion-duration) var(--ids-motion-linear),
        height var(--ids-motion-duration) var(--ids-motion-linear),
        width var(--ids-motion-duration) var(--ids-motion-linear),
        transform var(--ids-motion-duration) var(--ids-motion-linear);
    }
  }

  // Animation Style: default | 'fade'
  &.animation-fade {
    opacity: 0;

    &.open {
      opacity: 1;
    }
  }

  // Animation Style: 'scale-in' (Standard Modal)
  &.animation-scale-in {
    opacity: 0;
    transform-style: preserve-3d;
    transform: perspective(1000px) translate3d(0, 0, -500px);

    ::slotted(*) {
      opacity: 0;
    }

    &.open {
      opacity: 1;
      transform: perspective(1000px) translate3d(0, 0, 0);

      ::slotted(*) {
        opacity: 1;
      }
    }
  }

  // Animation Style: 'slide-from-bottom' (Action Panel)
  &.animation-slide-from-bottom {
    opacity: 0;
    transform-style: preserve-3d;
    transform: perspective(1000px) translate3d(100%, 0, 0);

    &.open {
      opacity: 1;
      transform: perspective(1000px) translate3d(0, 0, 0);
    }
  }

  // Position style: viewport (uses transforms)
  &.position-viewport {
    position: absolute;
    left: 50%;
    top: 50%;
    transform-origin: left top;
    transform: translate(-50%, -50%);

    // Boundaries
    min-height: 15%;
    min-width: 15%;
    max-height: 100%;
    max-width: 100%;

    // When the height of `.content-wrapper` exceeds that of `.ids-popup`,
    // ResizeObserver automatically appends this class to enable scrolling of inner content
    &.fit-viewport {
      height: 100%;
    }

    // Override some default animation styles to add the correct
    // `translate(X/Y/Z/3d)` values to an existing transform property.
    &.animation-scale-in {
      transform: perspective(1000px) translate3d(-50%, -50%, -500px);

      &.open {
        transform: perspective(1000px) translate3d(-50%, -50%, 0);
      }
    }

    // Action Panel
    &.animation-slide-from-bottom {
      transform: perspective(1000px) translate3d(-50%, 110%, -100px);

      &.open {
        transform: perspective(1000px) translate3d(-50%, -50%, 0);
      }
    }
  }

  // style: "none" (temporary)
  // maybe makes sense to be "custom"?
  &.none {
    background-color: var(--ids-popup-color-background);
    border: 1px solid var(--ids-popup-color-border);
    padding: 1px solid var(--ids-popup-padding);
  }

  // style: "custom"
  // provides bare-minimum styles needed to create a popup, allowing external customizations
  &.custom {
    background-color: var(--ids-popup-color-background);
    border: 1px solid transparent;
  }

  // style: "menu"
  &.menu {
    background-color: var(--ids-popup-menu-color-background-default);
    border: 1px solid var(--ids-popup-menu-color-border-default);
    font-family: var(--ids-font-family-default);
    padding-block: var(--ids-popup-menu-padding);
    color: var(--ids-popup-menu-color-text-default);

    // New Light Regular Colors
    border-radius: var(--ids-popup-menu-border-radius);
    box-shadow: var(--ids-popup-menu-shadow-default);

    .arrow.bottom {
      border-bottom-color: var(--ids-popup-menu-color-border-default);
    }

    .arrow.bottom::after {
      border-bottom-color: var(--ids-popup-menu-color-background-default);
    }

    .arrow.left {
      border-left-color: var(--ids-popup-menu-color-border-default);
    }

    .arrow.left::after {
      border-left-color: var(--ids-popup-menu-color-background-default);
    }

    .arrow.right {
      border-right-color: var(--ids-popup-menu-color-border-default);
    }

    .arrow.right::after {
      border-right-color: var(--ids-popup-menu-color-background-default);
    }

    .arrow.top {
      border-top-color: var(--ids-popup-menu-color-border-default);
    }

    .arrow.top::after {
      border-top-color: var(--ids-popup-menu-color-background-default);
    }
  }

  // style: "menu-alt"
  &.menu-alt {
    background-color: var(--ids-popup-menu-color-background-inverse);
    border: 1px solid var(--ids-popup-menu-color-border-inverse);
    padding-block: var(--ids-popup-menu-padding);
    box-shadow: var(--ids-popup-menu-shadow-inverse);
    font-size: var(--ids-popup-menu-font-size);
    color: var(--ids-popup-menu-color-text-inverse);
    border-color: var(--ids-popup-menu-color-border-inverse);
    border-radius: var(--ids-border-radius-xxs);
    font-family: var(--ids-font-family-default);

    .arrow.bottom,
    .arrow.bottom::after {
      border-bottom-color: var(--ids-popup-menu-color-border-inverse);
    }

    .arrow.left,
    .arrow.left::after {
      border-left-color: var(--ids-popup-menu-color-border-inverse);
    }

    .arrow.right,
    .arrow.right::after {
      border-right-color: var(--ids-popup-menu-color-border-inverse);
    }

    .arrow.top,
    .arrow.top::after {
      border-top-color: var(--ids-popup-menu-color-border-inverse);
    }
  }

  // style: "tooltip"
  &.tooltip {
    background-color: var(--ids-tooltip-color-background);
    border-radius: var(--ids-tooltip-border-radius);
    box-shadow: var(--ids-tooltip-shadow);
    cursor: var(--ids-cursor-pointer);
    color: var(--ids-tooltip-color-text);
    display: inline-block;
    font-family: var(--ids-font-family-default);
    font-size: var(--ids-tooltip-font-size);
    max-width: 75vw;
    padding: var(--ids-tooltip-padding);
    width: auto;
    word-wrap: break-word;
    z-index: var(--ids-z-index-70);

    .arrow.bottom,
    .arrow.bottom::after {
      border-bottom-color: var(--ids-tooltip-color-background);
    }

    .arrow.bottom {
      top: -6px;
    }

    .arrow.left,
    .arrow.left::after {
      border-left-color: var(--ids-tooltip-color-background);
    }

    .arrow.left {
      right: -6px;
    }

    .arrow.right,
    .arrow.right::after {
      border-right-color: var(--ids-tooltip-color-background);
    }

    .arrow.right {
      left: -6px;
    }

    .arrow.top,
    .arrow.top::after {
      border-top-color: var(--ids-tooltip-color-background);
    }

    .arrow.top {
      bottom: -6px;
    }

    // Used for alerts
    &.error-color {
      background-color: var(--ids-tooltip-error-color-background-error);

      .arrow.bottom,
      .arrow.bottom::after {
        border-bottom-color: var(--ids-tooltip-error-color-background-error);
      }

      .arrow.left,
      .arrow.left::after {
        border-left-color: var(--ids-tooltip-error-color-background-error);
      }

      .arrow.right,
      .arrow.right::after {
        border-right-color: var(--ids-tooltip-error-color-background-error);
      }

      .arrow.top,
      .arrow.top::after {
        border-top-color: var(--ids-tooltip-error-color-background-error);
      }
    }

    &.info-color {
      background-color: var(--ids-tooltip-info-color-background-info);

      .arrow.bottom,
      .arrow.bottom::after {
        border-bottom-color: var(--ids-tooltip-info-color-background-info);
      }

      .arrow.left,
      .arrow.left::after {
        border-left-color: var(--ids-tooltip-info-color-background-info);
      }

      .arrow.right,
      .arrow.right::after {
        border-right-color: var(--ids-tooltip-info-color-background-info);
      }

      .arrow.top,
      .arrow.top::after {
        border-top-color: var(--ids-tooltip-info-color-background-info);
      }
    }

    &.alert-color,
    &.warning-color {
      background-color: var(--ids-tooltip-color-background-warning);

      .arrow.bottom,
      .arrow.bottom::after {
        border-bottom-color: var(--ids-tooltip-color-background-warning);
      }

      .arrow.left,
      .arrow.left::after {
        border-left-color: var(--ids-tooltip-color-background-warning);
      }

      .arrow.right,
      .arrow.right::after {
        border-right-color: var(--ids-tooltip-color-background-warning);
      }

      .arrow.top,
      .arrow.top::after {
        border-top-color: var(--ids-tooltip-color-background-warning);
      }
    }

    &.success-color {
      background-color: var(--ids-tooltip-color-background-success);

      .arrow.bottom,
      .arrow.bottom::after {
        border-bottom-color: var(--ids-tooltip-color-background-success);
      }

      .arrow.left,
      .arrow.left::after {
        border-left-color: var(--ids-tooltip-color-background-success);
      }

      .arrow.right,
      .arrow.right::after {
        border-right-color: var(--ids-tooltip-color-background-success);
      }

      .arrow.top,
      .arrow.top::after {
        border-top-color: var(--ids-tooltip-color-background-success);
      }
    }
  }

  // style: "tooltip-alt"
  &.tooltip-alt {
    background-color: var(--ids-tooltip-color-background-inverse);
    padding: var(--ids-tooltip-padding);
    border-radius: var(--ids-tooltip-border-radius);
    font-size: var(--ids-tooltip-font-size);
    color: var(--ids-tooltip-color-text-inverse);
    font-family: var(--ids-font-family-default);
  }

  // style: "modal"
  &.modal {
    background-color: var(--ids-modal-color-background);
    border: 1px solid transparent;
    padding: var(--ids-modal-padding);
    border-radius: var(--ids-modal-border-radius);
    font-family: var(--ids-font-family-default);
    color: var(--ids-modal-color-text);

    &.open {
      border-color: var(--ids-modal-color-border);
      box-shadow: var(--ids-modal-shadow-default);
    }
  }

  // style: "dropdown"
  &.dropdown {
    @include mixins.antialiased();

    background-color: var(--ids-dropdown-color-background-default);
    box-shadow: var(--ids-dropdown-shadow-default);
    border-radius: var(--ids-dropdown-border-radius);
    outline: none;
    border-top-color: var(--ids-dropdown-attached-color-border);

    &.open {
      border: 1px solid var(--ids-dropdown-color-border);
      border-top-color: var(--ids-dropdown-attached-color-border);
    }

    &.flipped {
      border-radius: var(--ids-dropdown-border-radius-opened-up);
      border-bottom-color: var(--ids-dropdown-attached-color-border);
      border-top-color: var(--ids-dropdown-color-border);
      box-shadow: var(--ids-dropdown-shadow-opened-up);
    }
  }

  // style: "module-nav"
  &.module-nav {
    @include mixins.antialiased();

    background-color: var(--ids-module-nav-input-bg-color);
    border: var(--ids-module-nav-input-border-width) solid var(--ids-module-nav-input-border-color);
    border-radius: var(--ids-module-nav-common-border-radius);
    box-shadow: var(--ids-module-nav-settings-menu-box-shadow);
    color: var(--ids-module-nav-settings-menu-item-text-color);
    padding-block: var(--ids-module-nav-gutter-size);
  }

  // 'has-maxheight' setting
  // (Does not apply to Modals, which contain scrolling differently)
  &:not(.position-viewport).has-maxheight {
    .content-wrapper {
      height: var(--ids-popup-maxheight);
      overflow: auto;
    }
  }
}

.content-wrapper {
  overflow: hidden;
  position: static;
  height: 100%;
  width: 100%;
}

// RTL Fixes
:host([dir='rtl']) {
  .arrow.bottom::after {
    left: var(--ids-popup-arrow-size);
  }

  .arrow.top::after {
    left: unset;
    right: calc(var(--ids-popup-arrow-size) * -1);
  }

  .ids-popup.tooltip .arrow.top::after {
    left: calc(var(--ids-popup-arrow-size) * -1);
  }
}

