$ids-tab-alternate-color-disabled: rgba(255 255 255 / 0.4);
$ids-tab-min-width: 135px;
$ids-tab-actionable-min-width: 44px;
$ids-tab-vertical-height: 42px;

@mixin ids-tabs-focus-border($inset-x-distance: 4, $inset-y-distance: 4, $offset-x-distance: -1, $offset-y-distance: 0) {
  outline: none;

  &:not(.hide-focus) {
    &::before {
      border: 1px solid;
      position: absolute;
      inset-block-start: #{$offset-x-distance}px;
      inset-inline-start: #{$offset-y-distance}px;
      width: calc(100% - #{$inset-x-distance}px);
      height: calc(100% - #{$inset-y-distance}px);
      content: '';
      pointer-events: none;
    }
  }
}

// Adds the "underline" element for selected state.
// cannot read css var for color in ::after
// without shadowDOM scope so need .selection-underline div
// as workaround
@mixin ids-tabs-selected-underline() {
  border-bottom: 1px solid transparent;

  &::after,
  & .selection-underline {
    position: absolute;
    height: 3px;
    inset-block-end: 0;
    inset-inline: 0;
    z-index: 1;
    pointer-events: none;
    content: '';
  }
}

@mixin display-data-text-as-bold() {
  &::after {
    content: attr(data-text);
    content: attr(data-text) / '';
    font-weight: 700;
    visibility: hidden;
    height: 0;
    user-select: none;
    pointer-events: none;

    @media speech {
      display: none;
    }
  }
}

:host(:not([hidden])) {
  display: block;
}

:host([count]) {
  ::slotted(ids-trigger-button) {
    padding-inline-start: var(--ids-space-xs);
  }
}

// =================================================
// Default Variant
// =================================================
:host(ids-tab:not([orientation='vertical']):not([color-variant='module']):first-child),
:host(ids-tab-more:not([orientation='vertical']):not([color-variant='module']):first-child),
.ids-tabs-container:not(.orientation-vertical):not(.color-variant-module) [class*='ids-tab']:first-child {
  margin-inline-start: var(--ids-space-2xs);
}

:host(ids-tab:not([orientation='vertical']):not([color-variant='module']):last-child),
:host(ids-tab-more:not([orientation='vertical']):not([color-variant='module']):last-child),
.ids-tabs-container:not(.orientation-vertical):not(.color-variant-module) [class*='ids-tab']:last-child {
  margin-inline-end: var(--ids-space-2xs);
}

:host(ids-tab:not([orientation='vertical']):not([color-variant='module']):not(:last-child)),
:host(ids-tab-more:not([orientation='vertical']):not([color-variant='module']):not(:last-child)),
.ids-tabs-container:not(.orientation-vertical):not(.color-variant-module) [class*='ids-tab']:not(:last-child) {
  margin-inline-end: var(--ids-space-xs);
}

:host(ids-tab:focus-visible),
:host(ids-tab-more:focus-visible),
.ids-tab-container [class*='ids-tab']:focus-visible {
  outline: none;
}

.ids-tab {
  display: flex;
  position: relative;
  color: var(--ids-tab-color-text-default);
  box-sizing: border-box;
  height: 100%;
  padding-inline: var(--ids-space-2xs);
  padding-block: var(--ids-space-xs);
  list-style: none outside none;
  user-select: none;
  cursor: pointer;

  // Hover state
  &:hover {
    color: var(--ids-tab-color-text-hover);
    background-color: var(--ids-tab-color-background-hover);

    &::after,
    & .selection-underline {
      background-color: var(--ids-tab-color-text-hover);
    }
  }

  // Disabled
  &.disabled {
    cursor: default;
    color: var(--ids-tab-color-text-disabled);
    pointer-events: none;
  }

  // Selected state
  &.selected {
    color: var(--ids-tab-color-text-selected);
    cursor: default;

    &.ids-text {
      font-weight: 700;
    }

    &::after,
    & .selection-underline {
      background-color: var(--ids-tab-color-text-selected);
    }
  }

  // Actionable
  &.actionable {
    cursor: pointer;
  }

  // Counts
  &.count {
    padding-inline: 12px;

    .ids-tab-count-container {
      display: flex;
      flex-direction: column;
    }
  }

  &:focus-visible {
    outline: none;
  }

  // Trigger Button Slot
  .ids-tab-trigger-container {
    display: flex;
    place-content: center;
  }

  // Orientation-horizontal
  &.orientation-horizontal {
    &:not(.count) {
      padding-top: var(--ids-space-xs);
    }

    // In-page and Header Tabs only
    &:not(.color-variant-module) {
      border-bottom: 1px solid transparent;

      &:focus-visible {
        @include ids-tabs-focus-border(0, 2, 0, -1);
      }

      &.selected,
      &:hover {
        @include ids-tabs-selected-underline;
      }

      // Hide the underline on disabled
      &.disabled {
        &::after,
        & .selection-underline {
          display: none;
        }
      }
    }
  }

  // =================================================
  // Makes text appear bolded without shuddering the widths;
  ids-text::part(text),
  .ids-tab.ids-text {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
  }

  &:not(.orientation-vertical) {
    ids-text::part(text),
    .ids-tab.ids-text {
      @include display-data-text-as-bold;
    }
  }

  // =================================================
  // Tabs combined with IdsSwappable create "swappable" tabs
  &.swappable {
    padding-inline-start: var(--ids-space-xs);
    padding-inline-end: 6px;
  }
}


// =================================================
// Vertical Variant
// =================================================
.ids-tab.orientation-vertical {
  padding-inline: var(--ids-space-md);
  display: flex;
  align-items: flex-start;
  justify-content: center;
  flex-direction: column;
  width: 100%;
  height: $ids-tab-vertical-height;
  background-color: var(--ids-tab-vertical-color-background-default);
  color: var(--ids-tab-vertical-color-text-default);

  // vertical hover state
  &:hover {
    background-color: var(--ids-tab-vertical-color-background-hover);
    color: var(--ids-tab-vertical-color-text-hover);
  }

  // vertical disabled state
  &.disabled {
    background-color: var(--ids-tab-vertical-color-background-disabled);
    color: var(--ids-tab-vertical-color-text-disabled);
  }

  &:focus-visible {
    @include ids-tabs-focus-border(4, 4, 1, 1);
  }

  // vertical selected state
  &.selected {
    border-style: none;
    background-color: var(--ids-tab-vertical-color-background-selected);
    color: var(--ids-tab-vertical-color-text-selected);

    &:focus-visible:not(.hide-focus) {
      &::after,
      & .selection-underline {
        background-color: var(--ids-tab-vertical-color-border-selected);
      }
    }
  }
}

// =================================================
// Module Color Variant
// =================================================
:host(ids-tab[color-variant='module']:not(:last-child)),
.ids-tabs-container.color-variant-module .ids-tab:not(:last-child) {
  border-inline-end: 1px solid var(--ids-tab-module-color-border-right);
}

:host(ids-tab[color-variant='module']:not([orientation='vertical']):not([actionable])),
:host(ids-tab-more[color-variant='module']:not([orientation='vertical']):not([actionable])),
.ids-tab-container.color-variant-module:not(.orientation-vertical):not(.actionable) [class*='ids-tab'] {
  flex-grow: 1;
}

.ids-tab.color-variant-module {
  outline: none;
  border-bottom-width: 1px;
  background-color: var(--ids-tab-module-color-background-default);
  color: var(--ids-tab-module-color-text-default);
  justify-content: center;
  border-color: var(--ids-color-transparent);

  // Module - Hover state
  &:hover {
    color: var(--ids-tab-module-color-text-hover);
    background-color: var(--ids-tab-module-color-background-hover);
  }

  // Module - Selected state
  &.selected {
    background-color: var(--ids-tab-module-color-background-selected);
    color: var(--ids-tab-module-color-text-selected);
  }

  // Module - Focus state
  &:focus-visible {
    @include ids-tabs-focus-border(4, 4, 1, 1);
  }

  // Module - Disabled state
  &.disabled {
    background-color: var(--ids-tab-module-color-background-disabled);
    color: var(--ids-tab-module-color-text-disabled);
  }

  // Scoped to the first child text element to avoid conflicts with menus
  > ids-text,
  > .ids-text {
    text-align: center;
  }

  &:not(.actionable) {
    min-width: $ids-tab-min-width;
  }

  &.actionable {
    min-width: $ids-tab-actionable-min-width;
  }

  &.dismissible {
    justify-content: space-around;

    > ids-text,
    > .ids-text {
      flex-grow: 1;
    }

    ::slotted(ids-trigger-button),
    > .ids-trigger-button,
    > ids-trigger-button {
      flex-grow: 0;
      flex-shrink: 1;
      visibility: hidden;
    }

    &:hover {
      ::slotted(ids-trigger-button),
      > .ids-trigger-button,
      > ids-trigger-button {
        visibility: visible;
      }
    }
  }
}


// =================================================
// Alternate Color Variant
// =================================================
.ids-tab.color-variant-alternate {
  color: var(--ids-tab-alternate-color-text-default);


  // Alternate - Hover state
  &:hover {
    color: var(--ids-tab-alternate-color-text-hover);

    &::after {
      background-color: var(--ids-tab-alternate-color-background-hover);
    }
  }

  // Alternate - Selected state
  &.selected {
    color: var(--ids-tab-alternate-color-text-selected);

    &::after,
    & .selection-underline {
      background-color: var(--ids-tab-alternate-horizontal-color-background);
    }
  }

  // Alterante - Disabled state
  &.disabled {
    color: var(--ids-tab-alternate-color-text-disabled);

    &.selected {
      color: var(--ids-tab-alternate-color-text-disabled);

      &::after,
      & .selection-underline {
        background-color: var(--ids-tab-alternate-color-text-disabled);
      }
    }
  }

  // Alternate - Focus state
  &:not(.hide-focus):focus-visible,
  &:not(.hide-focus):focus,
  &:not(.hide-focus):focus-within {
    border-color: var(--ids-tab-alternate-color-border-focus);
  }
}


// =================================================
// Header Color Variant
// =================================================
.ids-tab.color-variant-header {
  color: var(--ids-tab-header-color-text-default);

  &:hover {
    background-color: var(--ids-tab-header-color-background-hover);
    color: var(--ids-tab-header-color-text-hover);
  }

  &.selected {
    color: var(--ids-tab-header-color-text-selected);

    &::after,
    & .selection-underline {
      background-color: var(--ids-tab-header-color-text-selected);
    }
  }

  &.disabled {
    color: var(--ids-tab-header-color-text-disabled);
  }

  // Alternate - Focus state
  &:not(.hide-focus) {
    &:focus-visible,
    &:focus,
    &:focus-within {
      border-color: var(--ids-tab-header-color-border-focus);
    }
  }
}


// "More" Tab's text content and icons are centered
.tab-more-text {
  display: inline-flex;
  align-items: center;

  > *:not(.last-child) {
    padding-inline-end: var(--ids-space-2xs);
  }

  ids-text,
  .ids-text {
    display: inline-block;
  }
}

// Popupmenus inside of the "More Tabs" tab, or Dropdown tabs
ids-popup-menu,
.ids-popup-menu {
  position: absolute;
  width: 100%;
}

// "More Tabs" tab flex rules
.ids-tab:not(.more) {
  ::slotted(ids-icon) {
    color: currentColor;
    pointer-events: none;
  }
}

.ids-tab.more.orientation-horizontal:not(.color-variant-module) {
  border-bottom: 0 solid transparent;
  margin-inline-end: -4px;

  .tab-more-text {
    padding: 0 var(--ids-space-2xs);
  }
}

::slotted(ids-trigger-button) {
  align-items: center;
  color: currentColor;
  cursor: pointer;
  display: flex;
  justify-content: center;
  margin-inline-end: var(--ids-tab-dismiss-button-offset);
  place-self: center;
}

::slotted(.ids-tab-more-menu-item-text) {
  display: inline-block;
  margin-inline-start: var(--ids-space-2xs);
}
