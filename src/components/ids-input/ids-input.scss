@use '../../themes/mixins/ids-core-mixins' as mixins;
@import '../../themes/mixins/ids-clearable-mixin';
@import '../../themes/mixins/ids-dirty-tracker-mixin';
@import '../../themes/mixins/ids-label-state-mixin';
@import '../../themes/mixins/ids-validation-mixin';

// These input field sizes come from the design tokens and are adjusted
// here to account for 1px border size on top/bottom or left/right in some calculations.
$border-input-size-xs: calc(var(--ids-input-width-10) - 2px);
$border-input-size-sm: calc(var(--ids-input-width-20) - 2px);
$border-input-size-md: calc(var(--ids-input-width-40) - 2px);
$border-input-size-mm: calc(var(--ids-input-width-30) - 2px);
$border-input-size-lg: calc(var(--ids-input-width-50) - 2px);
$border-input-field-height-xs: calc(var(--ids-input-height-10) - 2px);
$border-input-field-height-sm: calc(var(--ids-input-height-20) - 2px);
$border-input-field-height-md: calc(var(--ids-input-height-30) - 2px);
$border-input-field-height-lg: calc(var(--ids-input-height-40) - 2px);
$input-size-full: 100%;

// Mixin for message styles: [alert, error, info, success]
@mixin ids-input-message-styles {
  .alert,
  .alert:hover,
  .warning,
  .warning:hover  {
    border-color: var(--ids-input-color-border-alert-default);
    color: var(--ids-input-color-text-alert-default);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-color-border-alert-default);
      box-shadow: var(--ids-input-shadow-alert-focus) 0 0 3px 2px;
    }

    &[disabled] {
      border-color: var(--ids-input-color-border-alert-disabled);
      color: var(--ids-input-color-text-alert-disabled);
    }
  }

  .field-container.error,
  .field-container.error:hover {
    border-color: var(--ids-input-color-border-error-default);
    color: var(--ids-input-error-color-text-error-default);

    &.field-container:not(:focus-within) {
      border-color: var(--ids-input-color-border-error-default);
      color: var(--ids-input-error-color-text-error-default);
    }

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-color-border-error-default);
      box-shadow: var(--ids-input-color-shadow-error-focus) 0 0 3px 2px;
    }

    &[disabled] {
      border-color: var(--ids-input-color-border-error-disabled);
      color: var(--ids-input-color-border-error-disabled);
    }
  }

  .info,
  .info:hover {
    border-color: var(--ids-input-color-border-info-default);
    color: var(--ids-input-color-text-info-default);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-color-border-info-default);
      box-shadow: var(--ids-input-shadow-info-focus)  0 0 3px 2px;
    }

    &[disabled] {
      border-color: var( --ids-input-color-border-info-disabled);
      color: var(--ids-input-color-text-info-disabled);
    }
  }

  .success,
  .success:hover {
    border-color: var(--ids-input-color-border-success-default);
    color: var(--ids-input-color-text-success-default);

    &:focus-within,
    &.is-active {
      border-color: var(--ids-input-color-border-success-default);
      box-shadow: var(--ids-input-shadow-success-focus) 0 0 3px 2px;
    }

    &[disabled] {
      border-color: var(--ids-input-color-border-success-disabled);
      color: var(--ids-input-color-text-success-disabled);
    }
  }
}

// Mixin for label wrap ellipsis
@mixin ids-input-label-wrap-ellipsis {
  .ids-label-text {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    &.required {
      padding-inline-end: var(--ids-space-xs);

      &::after {
        display: block;
        margin-top: unset;
        margin-inline-start: 100%;
        top: -8px;
      }
    }
  }
}

/* stylelint-disable */
// Function to calculate width subtract pad
@function ids-input-size-with-pad($width, $pad: 8px) {
  @return calc($width - $pad);
}
/* stylelint-enable */

// Mixin for label wrap no-stretch
@mixin ids-input-label-wrap-no-stretch {
  .xs .ids-label-text {
    max-width: $border-input-size-xs;
  }

  .sm .ids-label-text {
    max-width: ids-input-size-with-pad($border-input-size-sm);
  }

  .mm .ids-label-text {
    max-width: ids-input-size-with-pad($border-input-size-mm);
  }

  .md .ids-label-text {
    max-width: ids-input-size-with-pad($border-input-size-md);
  }

  .lg .ids-label-text {
    max-width: ids-input-size-with-pad($border-input-size-lg);
  }

  .full .ids-label-text {
    max-width: ids-input-size-with-pad($input-size-full);
  }
}

/* in case of external label in compound component */
.ids-label-text {
  @include mixins.antialiased();

  font-family: var(--ids-font-family-default), var(--ids-font-family-system-sans);
  color: var(--ids-input-label-color-text-default);
  display: flex;
  margin-block-end: var(--ids-input-margin-bottom);
  align-items: baseline;

  // Ability to center label from parent element
  justify-content: inherit;

  // Simulate standard label text size while empty with a non-breaking space
  &.empty {
    &::before {
      content: '\00a0';
    }
  }

  &.required {
    &::after {
      position: relative;
      font-family: var(--ids-font-family-default), var(--ids-font-family-system-sans);
      margin-inline-start: var(--ids-space-3xs);
      margin-inline-end: var(--ids-space-3xs);
      font-size: var(--ids-font-size-md);
      color: var(--ids-input-required-indicator-color-text-default);
      content: '*';
      margin-top: -10px;
      top: 1px;

      // Adding it so "*" sign doesn't change label text height
      line-height: 0;
    }

    &.no-required-indicator::after,
    &.empty::after {
      content: '';
    }
  }

  ids-text::part(text),
  .ids-text {
    display: inline;
  }
}

.disabled {
  .ids-label-text {
    color: var(--ids-input-label-color-text-disabled);
    opacity: var(--ids-input-disabled-opacity);

    &.required::after {
      color: var(--ids-input-required-indicator-color-text-disabled);
    }
  }
}

@mixin input-extra-small-height($h: $border-input-field-height-xs) {
  margin-block-end: var(--ids-font-size-2xs);

  .icon-dirty {
    left: -1px;
    top: -1px;
  }

  .ids-label-text {
    font-size: var(--ids-input-label-font-size);
  }

  .ids-input-field {
    padding-inline-start: var(--ids-space-2xs);
    padding-inline-end: var(--ids-space-2xs);
    padding-top: 0;
    padding-bottom: 0;
    font-size: var(--ids-input-font-size-sm);
    height: $h;
  }
}

:host {
  display: block;
  max-width: var(--ids-input-width-full);

  .ids-input {
    display: inline-block;
  }
}

:host([size='full']) {
  width: 100%;
}

:host([label-wrap='ellipsis']) {
  @include ids-input-label-wrap-ellipsis();
}

:host([label-wrap='ellipsis-no-stretch']) {
  @include ids-input-label-wrap-ellipsis();
  @include ids-input-label-wrap-no-stretch();
}

:host([label-wrap='wrap-no-stretch']) {
  @include ids-input-label-wrap-no-stretch();
}

.ids-input {
  position: relative;
  display: block;
  margin-block-end: var(--ids-space-sm);
  max-width: var(--ids-input-width-full);

  // Applied to the wrapper element that wraps the input and other interactable elements
  .field-container {
    border: 1px solid;
    border-collapse: separate;
    border-radius: var(--ids-border-radius-2xs);
    box-sizing: border-box;
    color: inherit;
    display: flex;
    align-items: center;
    margin: var(--ids-space-none);
    max-width: var(--ids-input-width-full);
    padding: var(--ids-space-none);
    position: relative;
    resize: none;
    text-align: left;
    transition: border var(--ids-motion-duration) var(--ids-motion-ease);
  }

  .field-container.square {
    border-radius: var(--ids-border-radius-none);
  }

  &:focus-within,
  &.readonly:focus-within,
  &.is-active {
    .ids-input-field {
      outline: none;
      outline-color: var(--ids-color-transparent);
    }

    .field-container {
      border-color: var(--ids-input-color-border-focus);
      box-shadow: var(--ids-input-color-border-shadow);
    }
  }

  .ids-icon.starting-icon {
    margin-inline-start: var(--ids-space-xs);
  }

  .ids-icon.ending-icon {
    margin-inline-end: var(--ids-space-xs);
  }

  // Applied to the shadow root's HTMLInputElement
  .ids-input-field {
    @include mixins.antialiased();

    box-sizing: border-box;
    background-color: var(--ids-color-transparent);
    border: none;
    color: inherit;
    font-family: var(--ids-font-family-default), var(--ids-font-family-system-sans);
    padding-block-start: var(--ids-space-2xs);
    padding-block-end: var(--ids-space-2xs);
    padding-inline-start: var(--ids-space-12);
    padding-inline-end: var(--ids-space-12);
    font-size: var(--ids-input-font-size);
    width: 100%;

    &:focus-visible {
      outline: none;
    }

    appearance: none;
    display: inline-block;
    height: fit-content;
    resize: none;
    text-align: left;
    text-overflow: ellipsis;

    &.text-ellipsis {
      text-overflow: ellipsis;
    }

    // input text-align: [start, center, end]
    &.start {
      text-align: start;
    }

    &::placeholder {
      color: var(--ids-input-color-text-placeholder);
    }

    &.center {
      text-align: center;
    }

    &.end {
      text-align: end;
    }
  }

  // Validation Messages are appended beneath the `.field-container`
  .validation-message {
    margin-block-start: var(--ids-space-2xs);
    margin-bottom: var(--ids-space-none);

    .ids-icon {
      place-self: self-start;
      margin-top: 1px;
    }
  }

  // If `no-margins` is used:
  // - margins are removed from component top/bottom
  // - labels are visually hidden instead of displaying blank content for spacing
  &.no-margins,
  &.no-margins.compact {
    margin: var(--ids-space-none);

    &.field-height-xs {
      margin-block-end: var(--ids-space-none);
    }

    .field-container {
      margin-bottom: var(--ids-space-none);
    }

    .ids-input-field {
      margin: var(--ids-space-none);
    }

    // Reverse the margins on `ids-input[no-margins]` fields to have the bottom margin on top
    .validation-message {
      margin-bottom: var(--ids-space-none);
      margin-block-start: var(--ids-space-2xs);
    }

    .ids-label-text {
      &.empty {
        margin: var(--ids-space-none);
        visibility: hidden;
        height: 0;
      }
    }
  }

  // input sizes: [xs, sm, mm, md, lg, full]
  // Subtracting 2 takes into account that the width includes the `.field-container` border on both sides.
  &.xs {
    .field-container,
    .validation-message {
      width: $border-input-size-xs;
    }
  }

  &.sm {
    .field-container,
    .validation-message {
      width: $border-input-size-sm;
    }
  }

  &.mm {
    .field-container,
    .validation-message {
      width: $border-input-size-mm;
    }
  }

  &.md {
    .field-container,
    .validation-message {
      width: $border-input-size-md;
    }
  }

  &.lg {
    .field-container,
    .validation-message {
      width: $border-input-size-lg;
    }
  }

  &.full {
    display: block;

    .field-container,
    .validation-message {
      width: var(--ids-input-width-full);
    }
  }

  @media (max-width: mixins.$breakpoint-xs) {
    .field-container,
    .validation-message {
      max-width: $border-input-size-mm;
    }
  }

  // input field-heights: [xs, sm, md, lg]
  // Subtracting 2 takes into account that the width includes the `.field-container` border on both sides.
  &.field-height-xs {
    @include input-extra-small-height();

    &.no-margin-bottom {
      margin-bottom: var(--ids-space-none);

      .field-container,
      .ids-input-field {
        margin-bottom: var(--ids-space-none);
      }
    }
  }

  &.field-height-sm .ids-input-field {
    height: $border-input-field-height-sm;
  }

  &.field-height-md .ids-input-field {
    height: $border-input-field-height-md;
  }

  &.field-height-lg .ids-input-field {
    height: $border-input-field-height-lg;
  }

  // input compact
  &.compact {
    @include input-extra-small-height($border-input-field-height-xs);

    &.no-margin-bottom {
      margin-bottom: var(--ids-space-none);

      .field-container,
      .ids-input-field {
        margin-bottom: var(--ids-space-none);
        height: $border-input-field-height-xs;
      }
    }
  }

  // Data Grid Variants

  // Flush/Invisible Variant (used in IdsDataGrid cell editing)
  &.color-variant-borderless {
    --ids-input-color-border-focus: var(--ids-color-transparent);

    margin: 1px;
    border-radius: var(--ids-border-radius-none);

    input {
      font-size: var(--ids-font-size-sm);
    }

    slot[name="trigger-start"],
    slot[name="trigger-end"] {
      display: flex;
    }

    slot[name="trigger-end"] {
      padding-inline-end: 3px;
    }

    .icon-dirty {
      display: none;
    }

    .validation-message {
      display: none;
    }

    .field-container {
      background-color: var(--ids-color-transparent);
      border-color: transparent !important;
    }

    &:focus-within .field-container {
      box-shadow: none;
    }

    &.ids-input.field-height-lg {
      .ids-input-field {
        padding-inline: calc(var(--ids-space-sm) - 2px);
      }
    }

    &.ids-input.field-height-md {
      .ids-input-field {
        padding-inline: calc(var(--ids-space-12) - 2px);
      }
    }

    &.ids-input.field-height-sm {
      .ids-input-field {
        padding-inline: calc(var(--ids-space-xs) - 2px);
      }
    }

    &.ids-input.field-height-xs {
      .ids-input-field {
        font-size: var(--ids-data-grid-font-size-sm);
        padding-inline: var(--ids-space-3xs);
      }

      slot[name="trigger-end"]  {
        padding-inline-end: var(--ids-space-none);
      }
    }

    &.ids-input.field-height-xxs {
      .ids-input-field {
        font-size: var(--ids-data-grid-font-size-sm);
        padding-inline: var(--ids-space-4xs);
      }

      slot[name="trigger-end"]  {
        padding-inline-end: var(--ids-space-none);
      }
    }
  }

  // Flush/Invisible Variant (used in IdsDataGrid inline cell editing)
  &.color-variant-in-cell {
    margin: 1px;

    input {
      font-size: var(--ids-font-size-sm);
    }

    .validation-message {
      display: none;
    }

    &.ids-input.field-height-lg .ids-input-field {
      padding-inline: 11px;
      height: 40px;
    }

    &.ids-input.full .field-container {
      margin-inline: 3px;
      width: initial;
    }

    &.ids-input.field-height-md .ids-input-field {
      padding-inline: 6px;
      height: 30px;
    }

    &.ids-input.field-height-sm .ids-input-field {
      padding-inline: var(--ids-space-2xs);
      height: 27px;
    }

    &.ids-input.field-height-sm.full .field-container {
      margin-inline: var(--ids-space-3xs);
    }

    &.ids-input.field-height-xs .ids-input-field {
      padding-inline: 1px;
      height: 24px;
    }

    &.ids-input.field-height-xs.full .field-container {
      margin-inline: 1px;
    }
  }

  // Module Nav color variant
  // (used in IdsDropdown/IdsSearchField located inside IdsModuleNav)
  &.color-variant-module-nav {
    margin-block-end: var(--ids-space-none);
    transform: background-color var(--ids-motion-duration) var(--ids-motion-ease),
      border-color var(--ids-motion-duration) var(--ids-motion-ease),
      color var(--ids-motion-duration) var(--ids-motion-ease);

    .field-container {
      border-radius: var(--ids-module-nav-common-border-radius);
      border: var(--ids-module-nav-input-border-width) solid transparent;
    }

    input {
      background-color: var(--ids-color-transparent);
      color: inherit;

      &::placeholder {
        color: var(--ids-module-nav-search-input-placeholder-text-color);
      }

      &:active {
        color: var(--ids-module-nav-search-input-text-color);
      }
    }

    &:not([class*="field-height-"]) {
      height: var(--ids-module-nav-search-wrapper-height);

      input {
        height: var(--ids-module-nav-search-input-height);
      }
    }
  }

  // =======================================================
  // Color Styles

  &:not([class*='color-variant-']) {
    .field-container:not(:focus-within) {
      background-color: var(--ids-input-color-background-default);
      border-color: var(--ids-input-color-border-default);
      color: var(--ids-input-color-text-default);
    }

    &.readonly {
      .field-container,
      &.hover .field-container,
      &.focus-within .field-container {
        &.error,
        &.error:hover {
          border-color: var(--ids-color-error-default);
          color: var(--ids-color-error-default);
        }
      }

      &:not(.readonly-background):not(.bg-transparent) {
        .field-container,
        &.hover .field-container,
        &.focus-within .field-container {
          background-color: var(--ids-input-color-background-readonly);
        }
      }
    }

    &.disabled {
      .field-container,
      &:hover .field-container,
      &:focus-within .field-container {
        border-color: var(--ids-input-color-border-disabled);
        color: var(--ids-input-color-text-disabled);
        opacity: var(--ids-input-disabled-opacity);

        // Safari input text color
        -webkit-text-fill-color: var(--ids-input-color-text-disabled);
      }
    }

    &.bg-transparent {
      .field-container,
      &.readonly .field-container,
      &.disabled .field-container {
        background-color: var(--ids-color-transparent);
      }

      &:focus-within {
        .field-container {
          background-color: var(--ids-color-transparent);
        }
      }
    }


    &:hover:not(.readonly):not(.disabled):not(:focus):not(:focus-within),
    &:hover.readonly.readonly-background {
      .field-container {
        border-color: var(--ids-input-color-border-hover);
      }

      // Include error styles
      @include ids-input-message-styles();
    }

    &.is-active,
    &.is-active:hover.readonly.readonly-background {
      .field-container {
        border-color: var(--ids-input-color-border-focus);
      }

      // Include error styles
      @include ids-input-message-styles();
    }

    &:hover:not(.disabled).readonly.readonly-background.color-variant-alternate-formatter {
      .field-container {
        border-color: var(--ids-data-grid-filter-input-color-border-hover);
      }
    }

    // Include error styles
    @include ids-input-message-styles();
  }

  // Alternate Color Variant (used in IdsHeader - Search)
  &.color-variant-alternate {
    .field-container {
      border-color: var(--ids-input-header-color-border);
      color: var(--ids-input-header-color-text-default);
      background-color: var(--ids-input-header-color-background);
      border-bottom: 1px solid var(--ids-input-header-color-border);
      box-shadow: none;
    }

    &:focus-within .field-container {
      border-color: var(--ids-input-color-border-focus);
      box-shadow: var(--ids-input-color-border-shadow);
    }

    .ids-input-field {
      color: var(--ids-input-header-color-text-default);

      &::placeholder {
        color: var(--ids-input-header-color-text-placeholder);
      }
    }

    &.readonly-background {
      .ids-input-field::placeholder {
        color: var(--ids-input-header-color-text-placeholder);
      }
    }
  }

  // Alternate-formatter Color Variant (used in IdsDataGrid filter)
  &.color-variant-alternate-formatter {
    .field-container {
      background-color: var(--ids-data-grid-filter-input-color-background);
      border-color: var(--ids-data-grid-filter-input-color-border-default);
      color: var(--ids-data-grid-filter-input-color-text-default);
    }

    &:hover.readonly.readonly-background,
    &:hover:not(.readonly):not(.disabled) {
      .field-container {
        border-color: var(--ids-data-grid-filter-input-color-border-hover);
      }
    }

    &:focus-within {
      .field-container,
      &:hover.readonly.readonly-background,
      &:hover:not(.readonly):not(.disabled) .field-container {
        border-color: var(--ids-data-grid-filter-input-color-border-focus);
      }

      .ids-input-field {
        box-shadow: var(--ids-input-color-border-shadow);
      }
    }

    &.disabled
    &.disabled:hover {
      .field-container {
        border-color: var(--ids-data-grid-filter-input-color-border-disabled);
        color: var(--ids-data-grid-filter-input-color-text-disabled);
      }
    }

    &.readonly:not(.readonly-background):not(.bg-transparent) .field-container {
      background-color: var(--ids-data-grid-filter-input-color-background-readonly);
      border-color: var(--ids-data-grid-filter-input-color-border-readonly);
      color: var(--ids-data-grid-filter-input-color-text-readonly);
    }

    .ids-input-field::placeholder {
      color: var(--ids-data-grid-filter-input-color-text-placeholder);
    }
  }

  // App Menu
  &.color-variant-app-menu {
    .field-container {
      color: var(--ids-input-color-text-app-menu);
    }
  }

  // List Builder
  &.color-variant-list-builder {
    .field-container {
      background-color: var(--ids-color-transparent);
      color: var(--ids-list-builder-input-text-color);
      border: 0;
    }
  }

  // Module Nav
  /* stylelint-disable-next-line no-duplicate-selectors */
  &.color-variant-module-nav {
    color: var(--ids-module-nav-search-input-text-color);

    /* stylelint-disable-next-line no-duplicate-selectors */
    .field-container {
      background-color: var(--ids-color-transparent);
      border-color: var(--ids-color-transparent);
      color: inherit;
    }

    .ids-input-field {
      background-color: var(--ids-color-transparent);
      color: inherit;

      &::placeholder {
        color: var(--ids-module-nav-search-input-placeholder-text-color);
      }

      &:active {
        color: var(--ids-module-nav-search-input-text-color);
      }
    }

    &.has-clearable {
      .btn-clear {
        margin-inline-end: 5px;
      }
    }

    &:hover {
      .field-container {
        background-color: var(--ids-module-nav-search-input-hover-bg-color);
      }

      .ids-input-field::placeholder {
        color: var(--ids-module-nav-search-input-placeholder-text-color);
      }

      .ids-input-field {
        color: var(--ids-module-nav-input-text-color);
      }
    }

    &:focus-within,
    &.readonly:focus-within
    &.is-active {
      .field-container {
        background-color: var(--ids-module-nav-input-focus-bg-color);
        border-color: var(--ids-module-nav-item-selected-text-color);
        box-shadow: none;
      }

      .ids-input-field::placeholder {
        color: var(--ids-module-nav-search-input-focused-placeholder-text-color);
      }

      .ids-input-field {
        color: var(--ids-module-nav-input-text-color);
      }
    }
  }
}

.caps-lock-indicator {
  padding-inline-start: var(--ids-space-xs);
  padding-inline-end: var(--ids-space-xs);
}

.show-hide-password {
  padding-inline-end: var(--ids-space-3xs);
}

.is-uppercase {
  text-transform: uppercase;
}

.highlight {
  font-weight: var(--ids-font-weight-bold);
}

.ids-input-field[type='number']::-webkit-inner-spin-button,
.ids-input-field[type='number']::-webkit-outer-spin-button {
  appearance: none;
}

// Remove Safari caps lock icon
.ids-input-field::-webkit-caps-lock-indicator {
  visibility: hidden;
}

// Autocomplete dropdown menu sizes
:host ids-popup[type='dropdown'] {
  width: 100%;
  max-width: var(--ids-input-width-40);
}

:host([size='xs']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-10);
}

:host([size='sm']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-20);
}

:host([size='mm']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-30);
}

:host([size='md']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-40);
}

:host([size='lg']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-50);
}

:host([size='full']) ids-popup[type='dropdown'] {
  max-width: var(--ids-input-width-full);
}

// Loading Indicator
:host(:not([show-loading-indicator='true'])) {
  ::slotted(.slot-loading-indicator) {
    display: none;
  }
}

:host([show-loading-indicator='true']) {
  pointer-events: none;

  ::slotted(ids-loading-indicator) {
    margin-top: 3px;
    margin-bottom: 3px;
  }

  ::slotted(ids-trigger-button[slot='trigger-end']) {
    display: none;
  }

  ::slotted(.slot-loading-indicator) {
    margin-inline-end: 12px;
    margin-inline-start: var(--ids-space-xs);
  }
}

:host([show-loading-indicator='true'][field-height='xs']) {
  ::slotted(.slot-loading-indicator) {
    margin-inline-start: var(--ids-space-2xs);
    margin-inline-end: var(--ids-space-2xs);
  }
}

:host([show-loading-indicator='true'][field-height='sm']) {
  ::slotted(.slot-loading-indicator) {
    margin-inline-end: var(--ids-space-xs);
    margin-inline-start: var(--ids-space-2xs);
  }
}

::slotted(.audible) {
  @include mixins.audible();
}
