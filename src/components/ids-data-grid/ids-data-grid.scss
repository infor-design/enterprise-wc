@use 'sass:map';
@use '../../themes/mixins/ids-core-mixins' as mixins;
@import './ids-data-grid-common';
@import './ids-data-grid-filters';
@import './ids-data-grid-header';
@import './ids-data-grid-row';
@import './ids-data-grid-cell';
@import '../../components/ids-popup-menu/ids-popup-menu';
@import '../../themes/mixins/ids-checkbox-mixin';
@import '../../themes/mixins/ids-radio-mixin';

:host {
  --ids-data-grid-column-widths: repeat(1, minmax(110px, 1fr));

  contain: content;
  position: relative;
}

.ids-data-grid {
  // Outside border and Background and sizing
  background-color: var(--ids-data-grid-color-background);
  border: 1px solid var(--ids-data-grid-cell-color-border);
  border-radius: var(--ids-border-radius-2xs);
  border-collapse: collapse;
  box-sizing: border-box;
  overflow: auto;
  width: 100%;

  // Needed so sticky header works in safari
  display: inline-grid;
  align-content: flex-start;

  // Font Info
  @include mixins.antialiased();

  font-family: var(--ids-font-family-default), var(--ids-font-family-system-sans);
  font-size: var(--ids-font-size-sm);

  // Selection Checkbox
  .ids-data-grid-checkbox-container {
    cursor: var(--ids-cursor-pointer);
    display: flex;
    width: 100%;
  }

  // Checkbox alignments
  .ids-data-grid-cell.align-left {
    .ids-data-grid-checkbox-container {
      justify-content: start;
    }
  }

  .ids-data-grid-cell.align-center {
    .ids-data-grid-checkbox-container {
      justify-content: center;
    }
  }

  .ids-data-grid-cell.align-right {
    .ids-data-grid-checkbox-container {
      justify-content: end;
    }
  }

  .ids-data-grid-checkbox {
    @include checkbox-unchecked();

    &.editable {
      cursor: var(--ids-cursor-pointer);
    }

    border-color: var(--ids-data-grid-cell-checkbox-color-border);
    position: relative;
    left: var(--ids-space-none);
    top: var(--ids-space-none);

    &.disabled {
      @include checkbox-disabled-unchecked();
    }

    &.checked {
      @include checkbox-checked();

      &::after {
        @include checkbox-checked-after();

        animation: none;
      }

      &.disabled {
        @include checkbox-disabled-checked();
      }
    }

    &.indeterminate {
      @include checkbox-indeterminate();

      &::after {
        @include checkbox-indeterminate-after();

        animation: none;
      }
    }
  }

  // Selection Radio
  .ids-data-grid-radio-container {
    display: flex;
    justify-content: center;
    width: 100%;
  }

  .ids-data-grid-radio {
    @include radio-unchecked();

    cursor: var(--ids-cursor-pointer);
    position: relative;
    left: var(--ids-space-none);
    top: var(--ids-space-none);

    &::after {
      @include radio-unchecked-after();
    }

    &.disabled {
      @include radio-disabled-unchecked();
    }

    &.checked {
      @include radio-checked();

      &::after {
        @include radio-checked-after();
      }

      &.disabled {
        @include radio-disabled-checked();
      }
    }
  }

  // Tree Grid
  .ids-data-grid-cell .ids-data-grid-tree-container {
    display: flex;
    flex-direction: row;
    align-items: center;

    ids-button + .ids-data-grid-tree-field-container .text-ellipsis {
      margin-inline-start: var(--ids-space-none);
    }

    ids-button {
      padding-inline-start: var(--ids-space-2xs);
      padding-inline-end: var(--ids-space-none);
    }

    ids-button.expand-button {
      --ids-button-tertiary-color-background-hover: var(--ids-color-transparent);
      --ids-button-tertiary-color-border-hover: var(--ids-color-transparent);
      --ids-button-tertiary-color-background-pressed: var(--ids-color-transparent);
      --ids-button-tertiary-color-border-pressed: var(--ids-color-transparent);
    }

    .text-ellipsis {
      // No Ellipsis on tree columns, let links be focusable
      overflow: initial;

      ids-hyperlink {
        margin-inline-start: var(--ids-space-none);
      }
    }
  }

  .ids-data-grid-cell .ids-data-grid-tree-field-container {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  // =======================================================
  // Maps used for altering alignments of editable grid cells in different scenarios.
  // These rules are based on row-height, which is defined at the `.ids-data-grid` element level.
  // =======================================================
  $row-height-inline-tree-grid-button-widths: (
    'xxs': 30,
    'xs': 32,
    'sm': 34,
    'md': 40,
    'lg': 40
  );

  $row-height-padding-offsets: (
    'xxs': 12,
    'xs': 10,
    'sm': 8,
    'md': 3,
    'lg': 3
  );

  $row-height-dirty-indicator-offsets: (
    'xxs': 1,
    'xs': 1,
    'sm': 1,
    'md': 2,
    'lg': 2
  );

  $row-height-inline-dirty-indicator-offsets: (
    'xxs': 3,
    'xs': 4,
    'sm': 5,
    'md': 6,
    'lg': 6
  );

  $row-height-indents: (
    'xxs': 12,
    'xs': 13,
    'sm': 15,
    'md': 17,
    'lg': 17
  );

  $row-height-outline-padding: (
    'xxs': 2,
    'xs': 2,
    'sm': 3,
    'md': 4,
    'lg': 4
  );

  $row-height-outline-offsets: (
    'xxs': 2,
    'xs': 2,
    'sm': 5,
    'md': 8,
    'lg': 12
  );

  @each $rowHeight, $offset in $row-height-padding-offsets {
    // These values are different for each Row Height
    $button-width: map.get($row-height-inline-tree-grid-button-widths, $rowHeight);
    $indent: map.get($row-height-indents, $rowHeight);
    $dirty-indicator-offset: map.get($row-height-dirty-indicator-offsets, $rowHeight);
    $inline-dirty-indicator-offset: map.get($row-height-inline-dirty-indicator-offsets, $rowHeight);
    $outline-offset: map.get($row-height-outline-offsets, $rowHeight);
    $outline-padding: map.get($row-height-outline-padding, $rowHeight);

    &[data-row-height='#{$rowHeight}'] {
      // ================================================
      // Top-level grid alignments that depend solely on row height
      .ids-data-grid-cell {
        &.is-dirty {
          &:not(.is-inline) {
            &.formatter-text {
              &::before {
                inset-block-start: #{$dirty-indicator-offset}px;
                margin-inline-start: #{$dirty-indicator-offset}px;
              }
            }
          }

          &.is-inline {
            &.formatter-text {
              &::before {
                inset-block-start: #{$inline-dirty-indicator-offset}px;
                margin-inline-start: #{$inline-dirty-indicator-offset}px;
              }
            }
          }
        }

        // Defines the position of the "inline-edit" style's outline
        &.is-editable.is-inline {
          &:not(.formatter-tree) {
            @include ids-data-grid-inline-editable-outline($outline-padding);
          }

          &.formatter-tree {
            .text-ellipsis {
              @include ids-data-grid-inline-editable-outline($outline-padding);

              &::after {
                margin-inline-end: -#{$outline-offset}px;
              }
            }
          }
        }
      }

      // Remove start padding from tree-grid-contained `.text-ellipsis` elements
      .ids-data-grid-tree-field-container .text-ellipsis {
        padding-inline-start: var(--ids-space-none);
      }

      // ================================================
      // Expandable grid/tree grid nested alignment rules
      @for $i from 1 through 8 {
        [aria-level='#{$i}'] .ids-data-grid-cell {
          @if $i == 1 {
            .ids-data-grid-tree-field-container {
              margin-inline-start: #{$button-width}px;
            }

            ids-button {
              margin-inline-start: var(--ids-space-none);
            }

            ids-button + .ids-data-grid-tree-field-container {
              margin-inline-start: var(--ids-space-none);
            }
          } @else {
            .ids-data-grid-tree-field-container {
              margin-inline-start: #{$button-width + ($indent * ($i - 1)) + ($offset)}px;
            }

            ids-button {
              margin-inline-start: #{($indent * ($i - 1)) + $offset}px;
            }

            ids-button + .ids-data-grid-tree-field-container {
              margin-inline-start: var(--ids-space-none);
            }
          }

          // ================================================
          // Dirty-tracker rules dependent on `aria-level` nesting
          &.is-dirty {
            &.is-inline {
              .ids-data-grid-tree-field-container::before {
                inset-block-start: #{$inline-dirty-indicator-offset}px;
                margin-inline-start: #{$inline-dirty-indicator-offset}px;
              }
            }
          }
        }
      }
    }
  }

  // List Style Feature
  &.is-list-style {
    border-width: var(--ids-border-width-none);
  }

  // Used for row start
  &.waiting-load {
    overflow: hidden;

    .ids-data-grid-body {
      visibility: hidden;
    }
  }
}

// Used for Frozen Columns
.ids-data-grid-body {
  min-width: fit-content;
}

// Standalone Css Borders
table.ids-data-grid {
  display: table;
  outline: 1px solid var(--ids-data-grid-cell-color-border);
  outline-offset: -1px;
}

// Empty Message
.ids-data-grid-wrapper {
  position: relative;

  .ids-data-grid-toolbar {
    display: flex;
    width: 100%;
    margin: 6px var(--ids-space-none);
    align-items: center;
    justify-content: end;
  }
}

ids-empty-message:not([hidden]),
::slotted(ids-empty-message:not([hidden])) {
  display: flex;
  width: 100%;
  height: 100%;
  position: absolute;
  justify-content: center;
  align-items: center;
  top: var(--ids-space-none);
  pointer-events: none;
  margin-top: var(--ids-space-sm);
}

// Adjust for filter row
ids-empty-message.has-filter-row:not([hidden]),
::slotted(ids-empty-message.has-filter-row:not([hidden])) {
  margin-block-start: 35px;
}

.has-empty-message .ids-data-grid {
  min-height: var(--ids-data-grid-height-min);
}

// Loading Indicator
ids-loading-indicator {
  display: flex;
  width: 100%;
  height: 100%;
  position: absolute;
  justify-content: center;
  align-items: center;
  top: var(--ids-space-none);

  &[stopped] {
    display: none;
  }
}

:host(:not([disable-row-highlight])) ids-data-grid-row:hover {
  ids-data-grid-cell,
  ids-data-grid-cell.is-readonly {
    background-color: var(--ids-data-grid-row-color-background-hover);
  }
}

#datagrid-modal {
  --ids-modal-content-padding: var(--ids-space-none);
  --ids-modal-header-padding: var(--ids-space-sm) var(--ids-space-sm) var(--ids-space-xs) var(--ids-space-sm);
  --ids-popup-fit-height: 400px;

  ids-swappable-item {
    --ids-swappable-item-color-background-selected: var(--ids-color-accent-blue-weakest);
    --ids-swappable-item-color-text-selected: var(--ids-color-foreground-default-default);

    align-items: center;
    height: var(--ids-data-grid-modal-row-height);
  }

  #datagrid-modal-title {
    position: relative;
    top: calc(var(--ids-space-04) * -1);
  }

  ids-search-field {
    --ids-input-color-background-default: var(--ids-color-accent-neutral-weakest);
    --ids-search-field-color-background-default: var(--ids-color-accent-neutral-weakest);
    --ids-input-color-border-default: var(--ids-color-accent-neutral-weak);
    --ids-input-color-border-hover: var(--ids-color-accent-neutral-weak);
    --ids-input-color-border-focus: var(--ids-color-accent-neutral-weak);
    --ids-input-color-border-shadow: none;
    --ids-search-field-border-radius: var(--ids-border-radius-none);
    --ids-search-field-border-width: var(--ids-border-width-sm) var(--ids-border-width-none);

    margin-bottom: -8px;
    margin-top: calc(var(--ids-space-08) * -1);
    min-width: 330px;
    position: sticky;
    top: var(--ids-space-none);
    z-index: 1;
  }

  ids-text {
    width: 100%;
  }

  ids-switch {
    position: relative;
    top: var(--ids-space-3xs);
  }

  ids-swappable {
    width: 100%;
  }

  .datagrid-modal-column-list {
    --ids-modal-column-list-height: calc(100% - 14px);

    overflow: auto;
    max-height: var(--ids-modal-column-list-height);
  }
}

